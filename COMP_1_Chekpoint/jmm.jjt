options {
 LOOKAHEAD = 1;
 MULTI = true;
}

PARSER_BEGIN(Jmm)

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.IOException;
import java.util.*;

public class Jmm {
	public static void main(String args[]) throws ParseException, IOException {

		InputStream f = null;

		try {
            f = new FileInputStream("teste.jmm");
        }catch(FileNotFoundException e) {
			System.out.println("Error opening file:");
            System.out.println(e.getMessage());
            System.exit(1);
        }

		try{
			Jmm myJmm = new Jmm(f);
			SimpleNode root = myJmm.Program(); // returns reference to root node
		
			root.dump("");
		} catch (Exception e){
			System.out.println("Sorry, we were not able to run your code, because we found one or more error trying to parse it.");
		}
	}

}
PARSER_END(Jmm)

JAVACODE
void error_skipto(int kind) {
	ParseException e = generateParseException();  // generate the exception object.
	System.out.println(e.getMessage());  // print the error message
	Token t;
	do {
		t = getNextToken();
	} while (t.kind != kind);

}

SKIP:
{
	"\t" 
	| "\r"
	| "\n"
	| " " 
	| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
	| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
TOKEN:{
	< INTEGER: (["0" - "9"])+ >
	| < ADDSUB_OP: "+" | "-">
	| < ARITH_OP: "*" | "/" >
	| < AND : "&&" >
	| < BRACKET_R: "]" >
	| < BRACKET_L: "[" >
	| < BOOL: "true" | "false" >
	| < BOOLEAN: "boolean" >
	| < CLASS : "class" >
	| < CHAV_R : "}" >
	| < CHAV_L : "{" >
	| < EQ : "=" >
	| < EXT : "extends" >
	| < ELSE : "else" >
	| < IF : "if" >
	| < INT: "int" >
	//| < LF: "\n" >
	| < LENGTH : "length" >
	| < MAIN : "main" >
	| < NEW : "new" >
	| < NOT : "!" >
	| < PAR_R: ")" >
	| < PAR_L: "(" >
	| < PFINAL : "." >
	| < PUBLIC : "public" >
	| < RET : "return" >
	| < LESSTHAN : "<" >
	| < SCOLON: ";" >
	| < STATIC : "static" >
	| < STR : "String" >
	| < THIS : "this" >
	| < VIRG : "," >
	| < VOID : "void" >
	| < WHILE : "while" >
	| < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}

SimpleNode Program(): {} {
	ClassDeclaration() {
		return jjtThis;
	}
}

void ClassDeclaration(): { Token t;} {
	try{
		<CLASS> 
			t=<IDENTIFIER> { jjtThis.setName(t.image); }
		[ExtendClassDeclaration()] <CHAV_L>
	} catch (ParseException e){
		System.out.println("Class declaration: " + e.getMessage());
	}
	(VarDeclaration())*
	AuxClassDeclaration()
	<CHAV_R>
}

void ExtendClassDeclaration() #EXT: {} {
	<EXT> ID()
}

void AuxClassDeclaration() #void: {} {
	( <PUBLIC> (MainDeclaration() | MethodDeclaration()) )*
}

void VarDeclaration(): {} {
	try{
	Type() <IDENTIFIER> <SCOLON>
	} catch (ParseException e){
		System.out.println("Var declaration: " + e.getMessage());
	}
}

void MainDeclaration(): {} {
	<STATIC> <VOID> <MAIN> <PAR_L> 
	<STR> <BRACKET_L> <BRACKET_R> <IDENTIFIER> <PAR_R>
	<CHAV_L> (LOOKAHEAD(2) VarDeclaration())*
	(Statement())* <CHAV_R>
}

void MethodDeclaration(): {} {
	Type() <IDENTIFIER> <PAR_L>
	[Type() <IDENTIFIER> (<VIRG> Type() <IDENTIFIER>)*] <PAR_R>
	<CHAV_L> (LOOKAHEAD(2) VarDeclaration())* (Statement())* 
	<RET> Expression() <SCOLON> <CHAV_R>
}

void Type() #void: {} {
	(<INT> (<BRACKET_L> <BRACKET_R>)?)| <BOOLEAN> | <IDENTIFIER>
}

void Statement()#void : {Token t;} { 
	<CHAV_L> (Statement())* <CHAV_R>
	| (<IF> <PAR_L> Expression() <PAR_R> Statement() <ELSE> Statement())#IfElseStatement
	| (<WHILE> try{
			<PAR_L> Expression() <PAR_R>
		} catch (ParseException e){
			error_skipto(PAR_R);
		}
		 Statement())#WhileStatement 
	| LOOKAHEAD(2) Expression() <SCOLON>
	| (ID() (<BRACKET_L> Expression() <BRACKET_R>)? StatementAux())#Assing(>1)
	/*
	| Expression() <SCOLON>
	| <IDENTIFIER> StatementAux()
	
	| (ExpressionAux() #Expression) <SCOLON>
	| <IDENTIFIER> (<BRACKET_L> Expression() <BRACKET_R>)? ( StatementAux() | (ExpressionRecursive2() <SCOLON>))
	*/
}

void StatementAux() #void: {} {
	<EQ> Expression() <SCOLON>
}


/** An Expression. */
void Expression() #void : {}
{
  AndExpression()
}

/** An And(&&) Expression. */
void AndExpression() #void : {}
{
  (
    LessThanExpression() (<AND> LessThanExpression() )*
  ) #AND(>1)
}

/** An LessThan(<) Expression. */
void LessThanExpression() #void : {}
{
  (
    AddSubExpression() ( <LESSTHAN> AddSubExpression() )*
  ) #LessThan(>1)
}

/** An AddSub Expression. */
void AddSubExpression() #void : {Token t;}
{
  (
    MultiplicativeExpression() ( (t=<ADDSUB_OP> { jjtThis.setName(t.image); }) MultiplicativeExpression() )*
  ) #Additive(>1)
}

/** A Multiplicative Expression. */
void MultiplicativeExpression() #void : {Token t;}
{
  (
    AccessExpression() ( (t=<ARITH_OP> { jjtThis.setName(t.image); }) AccessExpression() )*
  ) #Multiplicative(>1)
}

/** An Access Expression. */
void AccessExpression()#void: {}
{
	(
		UnaryExpression() ( 
			(
				<BRACKET_L> Expression() <BRACKET_R>
				| <PFINAL> (<LENGTH> | (ID() <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>))
			)#Expression
		)*
	)#AccessExpr(>1)
}

/** A Unary Expression. */
void UnaryExpression() #void : {}
{
   <PAR_L> Expression() <PAR_R>
    | <NOT> UnaryExpression()
	| <NEW> ExpressionNew()
	| <THIS>
	| ID()
	| Bool()
	| Integer()
}

void ExpressionNew() #void: {} { 
	<INT> <BRACKET_L> Expression() <BRACKET_R>
	| <IDENTIFIER> <PAR_L> <PAR_R>
}	

/** An Identifier. */
void ID() :
{
  Token t;
}
{
  t=<IDENTIFIER>
  {
    jjtThis.setName(t.image);
  }
}

/** An Integer. */
void Integer() : {Token t;}
{
  t=<INTEGER>
  {
    jjtThis.setName(t.image);
  }
}

/** A Boolean. */
void Bool() : {}
{
  <BOOL>
}


/////////////////////////////////////////////////

/*
void Expression(): {} { 
	<IDENTIFIER> ExpressionRecursive()
	| ExpressionAux()
}

void ExpressionAux() #void: {} { 
	(
		<INTEGER>
		| <BOOL> 
		| <THIS>
		| <NEW> ExpressionNew()
		| <NOT> Expression()
		| <PAR_L> Expression() <PAR_R>
	) ExpressionRecursive()
}

void ExpressionNew() #New: {} { 
	<INT> <BRACKET_L> Expression() <BRACKET_R>
	| <IDENTIFIER> <PAR_L> <PAR_R>
}	

void ExpressionRecursive() #void: {} { 
	ExpressionRecursiveAux()
	| Empty()
}

void ExpressionRecursiveAux() #Expression: {} {
	(
		(<AND> | <LESSTHAN> | <ADDSUB_OP> | <ARITH_OP>) Expression()
		| <BRACKET_L> Expression() <BRACKET_R>
		| <PFINAL> (<LENGTH> | <IDENTIFIER> <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>)
	) ExpressionRecursive()
}
*/
/* This second recursive functions are helpers for the statement non terminal symbol */
/*
void ExpressionRecursive2() #void: {} { 
	ExpressionRecursiveAux2()
	| Empty()
}

void ExpressionRecursiveAux2() #Expression: {} {
	(
		(<AND> | <LESSTHAN> | <ADDSUB_OP> | <ARITH_OP>) Expression()
		| <PFINAL> (<LENGTH> | <IDENTIFIER> <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>)
	) ExpressionRecursive()
}*/


/* Epsilon terminal expressed as the non-terminal symbol empty*/
void Empty() #void: {}
{
	{}
}