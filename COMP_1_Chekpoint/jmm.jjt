options {
 LOOKAHEAD = 2;
}

PARSER_BEGIN(Jmm)

public class Jmm {
	public static void main(String args[]) throws ParseException {
		Jmm myJmm = new Jmm(System.in);
		SimpleNode root = myJmm.Program(); // returns reference to root node

		root.dump("");
	}
}

PARSER_END(Jmm)
SKIP:{
	" " | "\r" | "\t" 
	//|"\n"
}
TOKEN:{
	< INTEGER: (["0" - "9"])+ >
	| < ADDSUB_OP: "+" | "-">
	| < ARITH_OP: "*" | "/" >
	| < AND : "&&" >
	| < OR : "||" >
    | < BITWISE_OP: "&" | "|" | "^" >
	| < BRACKET_R: "]" >
	| < BRACKET_L: "[" >
	| < BOOL: "true" | "false" >
	| < BOOLEAN: "boolean" >
	| < CLASS : "class" >
	| < CHAV_R : "}" >
	| < CHAV_L : "{" >
	| < EQ : "=" >
	| < EXT : "extends" >
	| < ELSE : "else" >
	| < IF : "if" >
	| < INT: "int" >
	| < LF: "\n" >
	| < LENGTH : "length" >
	| < MAIN : "main" >
	| < NEW : "new" >
	| < NOT : "!" >
	| < PAR_R: ")" >
	| < PAR_L: "(" >
	| < PFINAL : "." >
	| < PUBLIC : "public" >
	| < RET : "return" >
	| < RELA_OP : ">" | "<" | "<=" | ">=" | "==" | "!=" >
	| < LESSTHAN : "<" >
	| < SCOLON: ";" >
	| < STATIC : "static" >
	| < STR : "String" >
	| < THIS : "this" >
	| < VIRG : "," >
	| < VOID : "void" >
	| < WHILE : "while" >
	| < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}

SimpleNode Program(): {} {
	ClassDeclaration() <LF> {
		return jjtThis;
	}
}

void ClassDeclaration(): {} {
	<CLASS> <IDENTIFIER> [<EXT> <IDENTIFIER>] <CHAV_L>
	(VarDeclaration())*
	(MainDeclaration() | MethodDeclaration())*
	<CHAV_R>
}

void VarDeclaration(): {} {
	Type() <IDENTIFIER> <SCOLON>
}

void MainDeclaration(): {} {
	<PUBLIC> <STATIC> <VOID> <MAIN> <PAR_L> 
	<STR> <BRACKET_L> <BRACKET_R> <IDENTIFIER> <PAR_R>
	<CHAV_L> (VarDeclaration())*
	(Statement())* <CHAV_R>
}

void MethodDeclaration(): {} {
	<PUBLIC> Type() <IDENTIFIER> <PAR_L>
	[Type() <IDENTIFIER> (<VIRG> Type() <IDENTIFIER>)*] <PAR_R>
	<CHAV_L> (VarDeclaration())* (Statement())* 
	<RET> Expression() <SCOLON> <CHAV_R>
}

void Type(): {} {
	<INT> | <BOOLEAN> | <IDENTIFIER> | (<INT> <BRACKET_L> <BRACKET_R>)
}

void Statement(): {} { 
	(<CHAV_L> (Statement())* <CHAV_R>)
	| <IF> <PAR_L> Expression() <PAR_R> Statement() <ELSE> Statement()
	| <WHILE> <PAR_L> Expression() <PAR_R> Statement()
	| Expression() <SCOLON>
	| <IDENTIFIER> <EQ> Expression() <SCOLON>
	| <IDENTIFIER> <BRACKET_L> Expression() <BRACKET_R> <EQ> Expression() <SCOLON>
}

void Expression(): {} { 
	(Expression() (<AND> | <LESSTHAN> | <ADDSUB_OP> | <ARITH_OP>) Expression())
	| (Expression() <BRACKET_L> Expression() <BRACKET_R>)
	| (Expression() <PFINAL> <LENGTH>) 
	| (Expression() <PFINAL> <IDENTIFIER> <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>)
	| <INTEGER>
	| <BOOL> 
	| <IDENTIFIER>
	| <THIS>
	| <NEW> <INT> <BRACKET_L> Expression() <BRACKET_R>
	| <NEW> <IDENTIFIER> <PAR_L> <PAR_R>
	| <NOT> Expression()
	| <PAR_L> Expression() <PAR_R>
}	