/* Jmm.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Jmm.java */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.IOException;
import java.util.*;

public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants, JmmConstants {/*@bgen(jjtree)*/
  protected static JJTJmmState jjtree = new JJTJmmState();
        static int errCounter = 0;

        public static void main(String args[]) throws ParseException, IOException {

                InputStream f = null;

                try {
                                                if(args.length == 0)
                f = new FileInputStream("../teste.jmm");
                                                else
                                                        f = new FileInputStream("../" + args[0]);
        }catch(FileNotFoundException e) {
                        System.out.println("Error opening file:");
            System.out.println(e.getMessage());
            System.exit(1);
        }

                try{
                        Jmm myJmm = new Jmm(f);
                        SimpleNode root = myJmm.Program(); // returns reference to root node

                        root.dump("");
                } catch (Exception e){
                        System.out.println(e.getMessage());
                        System.out.println("Sorry, we were not able to run your code, because we found one or more error trying to parse it.");
                }
        }

  static void error_skipto(int kind) throws ParseException {/*@bgen(jjtree) error_skipto */
     ASTerror_skipto jjtn000 = new ASTerror_skipto(JJTERROR_SKIPTO);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {incErrCounter();
        ParseException e = generateParseException();  // generate the exception object.
        System.out.println(e.getMessage());  // print the error message
        Token t;
        do {
                t = getNextToken();
        } while (t.kind != kind);/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static void incErrCounter() throws ParseException {/*@bgen(jjtree) incErrCounter */
     ASTincErrCounter jjtn000 = new ASTincErrCounter(JJTINCERRCOUNTER);
     boolean jjtc000 = true;
     jjtree.openNodeScope(jjtn000);
     try {errCounter++;
        if(errCounter >= 10){
                System.out.println("You have 10 or more errors in your code, fix them before continuing.");
                System.exit(1);
        }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
  }

  static final public SimpleNode Program() throws ParseException {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ClassDeclaration();
{if ("" != null) return jjtn000;}
      jj_consume_token(0);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** A Class declaration. */
  static final public void ClassDeclaration() throws ParseException {/*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t;
    try {
      try {
        jj_consume_token(CLASS);
        t = jj_consume_token(IDENTIFIER);
jjtn000.setName(t.image);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXT:{
          ExtendClassDeclaration();
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        jj_consume_token(CHAV_L);
      } catch (ParseException e) {
System.out.println("Class declaration: " + e.getMessage());
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case INT:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        VarDeclaration();
      }
      AuxClassDeclaration();
      jj_consume_token(CHAV_R);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** An extended class. */
  static final public void ExtendClassDeclaration() throws ParseException {/*@bgen(jjtree) Extend */
                                        ASTExtend jjtn000 = new ASTExtend(JJTEXTEND);
                                        boolean jjtc000 = true;
                                        jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(EXT);
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  static final public void AuxClassDeclaration() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUBLIC:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(PUBLIC);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        MainDeclaration();
        break;
        }
      case BOOLEAN:
      case INT:
      case IDENTIFIER:{
        MethodDeclaration();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

/** A Variable declaration. */
  static final public void VarDeclaration() throws ParseException {/*@bgen(jjtree) VarDeclaration */
                        ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);Token t; String type;
    try {
      try {
        type = Type();
        t = jj_consume_token(IDENTIFIER);
jjtn000.setName(t.image); jjtn000.setType(type);
        jj_consume_token(SCOLON);
      } catch (ParseException e) {
System.out.println("Var declaration: " + e.getMessage());
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** The main method. */
  static final public void MainDeclaration() throws ParseException {/*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(STATIC);
      jj_consume_token(VOID);
      jj_consume_token(MAIN);
      jj_consume_token(PAR_L);
      jj_consume_token(STR);
      jj_consume_token(BRACKET_L);
      jj_consume_token(BRACKET_R);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(PAR_R);
      jj_consume_token(CHAV_L);
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        VarDeclaration();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case BOOL:
        case CHAV_L:
        case IF:
        case NEW:
        case NOT:
        case PAR_L:
        case THIS:
        case WHILE:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_4;
        }
        Statement();
      }
      jj_consume_token(CHAV_R);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** A Method. */
  static final public void MethodDeclaration() throws ParseException {/*@bgen(jjtree) MethodDeclaration */
                           ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);Token t; String r;
    try {
ASTRet jjtn001 = new ASTRet(JJTRET);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
      try {
        r = Type();
jjtree.closeNodeScope(jjtn001, true);
                   jjtc001 = false;
jjtn001.setName(r);
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
      }
      t = jj_consume_token(IDENTIFIER);
jjtn000.setName(t.image);
      MethodParams();
ASTBody jjtn003 = new ASTBody(JJTBODY);
          boolean jjtc003 = true;
          jjtree.openNodeScope(jjtn003);
      try {
        jj_consume_token(CHAV_L);
        label_5:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_5;
          }
          VarDeclaration();
        }
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INTEGER:
          case BOOL:
          case CHAV_L:
          case IF:
          case NEW:
          case NOT:
          case PAR_L:
          case THIS:
          case WHILE:
          case IDENTIFIER:{
            ;
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            break label_6;
          }
          Statement();
        }
ASTReturn jjtn002 = new ASTReturn(JJTRETURN);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
        try {
          jj_consume_token(RET);
          Expression();
          jj_consume_token(SCOLON);
        } catch (Throwable jjte002) {
if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, true);
                  }
        }
        jj_consume_token(CHAV_R);
      } catch (Throwable jjte003) {
if (jjtc003) {
            jjtree.clearNodeScope(jjtn003);
            jjtc003 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte003 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte003;}
          }
          if (jjte003 instanceof ParseException) {
            {if (true) throw (ParseException)jjte003;}
          }
          {if (true) throw (Error)jjte003;}
      } finally {
if (jjtc003) {
            jjtree.closeNodeScope(jjtn003, true);
          }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** Method non-terminal auxiliar for its parameters. */
  static final public void MethodParams() throws ParseException {/*@bgen(jjtree) Params */
                              ASTParams jjtn000 = new ASTParams(JJTPARAMS);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t; String r;
    try {
      jj_consume_token(PAR_L);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case INT:
      case IDENTIFIER:{
        r = Type();
        ID1(r);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VIRG:{
            ;
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            break label_7;
          }
          jj_consume_token(VIRG);
          r = Type();
          ID1(r);
        }
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      jj_consume_token(PAR_R);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** A Type that returns as string the type token image. */
  static final public String Type() throws ParseException {Token type;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      type = jj_consume_token(INT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BRACKET_L:{
        type = jj_consume_token(BRACKET_L);
        jj_consume_token(BRACKET_R);
{if ("" != null) return "int[]";}
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      break;
      }
    case BOOLEAN:{
      type = jj_consume_token(BOOLEAN);
      break;
      }
    case IDENTIFIER:{
      type = jj_consume_token(IDENTIFIER);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type.image;}
    throw new Error("Missing return statement in function");
  }

/** A Statement. */
  static final public void Statement() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAV_L:{
      jj_consume_token(CHAV_L);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case BOOL:
        case CHAV_L:
        case IF:
        case NEW:
        case NOT:
        case PAR_L:
        case THIS:
        case WHILE:
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_8;
        }
        Statement();
      }
      jj_consume_token(CHAV_R);
      break;
      }
    case IF:{
ASTIfElseStatement jjtn001 = new ASTIfElseStatement(JJTIFELSESTATEMENT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(IF);
        jj_consume_token(PAR_L);
        Expression();
        jj_consume_token(PAR_R);
        Statement();
        jj_consume_token(ELSE);
        Statement();
      } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      break;
      }
    case WHILE:{
ASTWhileStatement jjtn002 = new ASTWhileStatement(JJTWHILESTATEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(WHILE);
        try {
          jj_consume_token(PAR_L);
          Expression();
          jj_consume_token(PAR_R);
        } catch (ParseException e) {
error_skipto(PAR_R);
        }
        Statement();
      } catch (Throwable jjte002) {
if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte002;}
            }
            if (jjte002 instanceof ParseException) {
              {if (true) throw (ParseException)jjte002;}
            }
            {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
      }
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_3(2)) {
ASTAssing jjtn003 = new ASTAssing(JJTASSING);
                        boolean jjtc003 = true;
                        jjtree.openNodeScope(jjtn003);
        try {
          ID();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BRACKET_L:{
            jj_consume_token(BRACKET_L);
            Expression();
            jj_consume_token(BRACKET_R);
            break;
            }
          default:
            jj_la1[11] = jj_gen;
            ;
          }
          StatementAux();
        } catch (Throwable jjte003) {
if (jjtc003) {
                          jjtree.clearNodeScope(jjtn003);
                          jjtc003 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte003 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte003;}
                        }
                        if (jjte003 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte003;}
                        }
                        {if (true) throw (Error)jjte003;}
        } finally {
if (jjtc003) {
                          jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
                        }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INTEGER:
        case BOOL:
        case NEW:
        case NOT:
        case PAR_L:
        case THIS:
        case IDENTIFIER:{
          Expression();
          jj_consume_token(SCOLON);
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public void StatementAux() throws ParseException {
    jj_consume_token(EQ);
    Expression();
    jj_consume_token(SCOLON);
  }

/** An Expression. */
  static final public void Expression() throws ParseException {
    AndExpression();
  }

/** An And(&&) Expression. */
  static final public void AndExpression() throws ParseException {
ASTAND jjtn001 = new ASTAND(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      LessThanExpression();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AND:{
          ;
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          break label_9;
        }
        jj_consume_token(AND);
        LessThanExpression();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

/** An LessThan(<) Expression. */
  static final public void LessThanExpression() throws ParseException {
ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      AddSubExpression();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LESSTHAN:{
          ;
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          break label_10;
        }
        jj_consume_token(LESSTHAN);
        AddSubExpression();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

/** An AddSub Expression. */
  static final public void AddSubExpression() throws ParseException {Token t;
ASTAdditive jjtn001 = new ASTAdditive(JJTADDITIVE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      AddSubExpressionAux();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SUB_OP:{
          ;
          break;
          }
        default:
          jj_la1[16] = jj_gen;
          break label_11;
        }
        t = jj_consume_token(SUB_OP);
jjtn001.setName(t.image);
        AddSubExpressionAux();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

/** An AddSubAux Expression. */
  static final public void AddSubExpressionAux() throws ParseException {Token t;
ASTAdditive jjtn001 = new ASTAdditive(JJTADDITIVE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      MultiplicativeExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ADD_OP:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_12;
        }
        t = jj_consume_token(ADD_OP);
jjtn001.setName(t.image);
        MultiplicativeExpression();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

/** A Multiplicative Expression. */
  static final public void MultiplicativeExpression() throws ParseException {Token t;
ASTMultiplicative jjtn001 = new ASTMultiplicative(JJTMULTIPLICATIVE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      MultiplicativeExpressionAux();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARITH_DIV:{
          ;
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          break label_13;
        }
        t = jj_consume_token(ARITH_DIV);
jjtn001.setName(t.image);
        MultiplicativeExpressionAux();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

/** A MultiplicativeAux Expression. */
  static final public void MultiplicativeExpressionAux() throws ParseException {Token t;
ASTMultiplicative jjtn001 = new ASTMultiplicative(JJTMULTIPLICATIVE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      AccessExpression();
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ARITH_MULT:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_14;
        }
        t = jj_consume_token(ARITH_MULT);
jjtn001.setName(t.image);
        AccessExpression();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

/** An Access Expression. */
  static final public void AccessExpression() throws ParseException {
ASTAccessExpr jjtn002 = new ASTAccessExpr(JJTACCESSEXPR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
    try {
      UnaryExpression();
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BRACKET_L:
        case PFINAL:{
          ;
          break;
          }
        default:
          jj_la1[20] = jj_gen;
          break label_15;
        }
ASTExpression jjtn001 = new ASTExpression(JJTEXPRESSION);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BRACKET_L:{
            jj_consume_token(BRACKET_L);
            Expression();
            jj_consume_token(BRACKET_R);
            break;
            }
          case PFINAL:{
            jj_consume_token(PFINAL);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LENGTH:{
              jj_consume_token(LENGTH);
              break;
              }
            case IDENTIFIER:{
              ID();
              jj_consume_token(PAR_L);
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case INTEGER:
              case BOOL:
              case NEW:
              case NOT:
              case PAR_L:
              case THIS:
              case IDENTIFIER:{
                Expression();
                label_16:
                while (true) {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case VIRG:{
                    ;
                    break;
                    }
                  default:
                    jj_la1[21] = jj_gen;
                    break label_16;
                  }
                  jj_consume_token(VIRG);
                  Expression();
                }
                break;
                }
              default:
                jj_la1[22] = jj_gen;
                ;
              }
              jj_consume_token(PAR_R);
              break;
              }
            default:
              jj_la1[23] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
            }
          default:
            jj_la1[24] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
        }
      }
    } catch (Throwable jjte002) {
if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte002;}
          }
          if (jjte002 instanceof ParseException) {
            {if (true) throw (ParseException)jjte002;}
          }
          {if (true) throw (Error)jjte002;}
    } finally {
if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
          }
    }
  }

/** A Unary Expression. */
  static final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PAR_L:{
      jj_consume_token(PAR_L);
      Expression();
      jj_consume_token(PAR_R);
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      UnaryExpression();
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      ExpressionNew();
      break;
      }
    case THIS:{
ASTThis jjtn001 = new ASTThis(JJTTHIS);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
      }
      break;
      }
    case IDENTIFIER:{
      ID();
      break;
      }
    case BOOL:{
      Bool();
      break;
      }
    case INTEGER:{
      Integer();
      break;
      }
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExpressionNew() throws ParseException {/*@bgen(jjtree) NewExpr */
  ASTNewExpr jjtn000 = new ASTNewExpr(JJTNEWEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        jj_consume_token(INT);
        jj_consume_token(BRACKET_L);
        Expression();
        jj_consume_token(BRACKET_R);
        break;
        }
      case IDENTIFIER:{
        ID();
        jj_consume_token(PAR_L);
        jj_consume_token(PAR_R);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** An Identifier. */
  static final public void ID() throws ParseException {/*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An Identifier that shows its type. */
  static final public void ID1(String type) throws ParseException {/*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setParam(t.image,type);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** An Integer. */
  static final public void Integer() throws ParseException {/*@bgen(jjtree) Integer */
                  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/** A Boolean. */
  static final public void Bool() throws ParseException {/*@bgen(jjtree) Bool */
               ASTBool jjtn000 = new ASTBool(JJTBOOL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BOOL);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/* Epsilon terminal expressed as the non-terminal symbol empty*/
  static final public void Empty() throws ParseException {

  }

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_3R_17()
 {
    if (jj_3R_21()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_20()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3R_22()
 {
    if (jj_scan_token(INT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_18()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_18()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_23()
 {
    if (jj_scan_token(BRACKET_L)) return true;
    return false;
  }

  static private boolean jj_3R_19()
 {
    if (jj_scan_token(BRACKET_L)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JmmTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200000,0x1010000,0x0,0x1010000,0x58888080,0x58888080,0x0,0x1010000,0x4000,0x1010000,0x58888080,0x4000,0x880000,0x58008080,0x1000,0x0,0x200,0x100,0x800,0x400,0x80004000,0x0,0x58008080,0x2000000,0x80004000,0x58008080,0x1000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x400,0x1,0x410,0x640,0x640,0x80,0x400,0x0,0x400,0x640,0x0,0x200,0x440,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x80,0x440,0x400,0x0,0x440,0x400,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[3];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Jmm(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Jmm(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Jmm(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JmmTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Jmm(JmmTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(JmmTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
