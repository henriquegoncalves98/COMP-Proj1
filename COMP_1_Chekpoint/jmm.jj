/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm.jj */
/*@egen*/options {
 LOOKAHEAD = 2;
}

PARSER_BEGIN(Jmm)

public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJmmState jjtree = new JJTJmmState();

/*@egen*/
	public static void main(String args[]) throws ParseException {
		Jmm myJmm = new Jmm(System.in);
		SimpleNode root = myJmm.Program(); // returns reference to root node

		root.dump("");
	}
}

PARSER_END(Jmm)
SKIP:{
	" " | "\r" | "\t" 
	//|"\n"
}
TOKEN:{
	< INTEGER: (["0" - "9"])+ >
	| < ADDSUB_OP: "+" | "-">
	| < ARITH_OP: "*" | "/" >
	| < AND : "&&" >
	| < OR : "||" >
    | < BITWISE_OP: "&" | "|" | "^" >
	| < BRACKET_R: "]" >
	| < BRACKET_L: "[" >
	| < BOOL: "true" | "false" >
	| < BOOLEAN: "boolean" >
	| < CLASS : "class" >
	| < CHAV_R : "}" >
	| < CHAV_L : "{" >
	| < EQ : "=" >
	| < EXT : "extends" >
	| < ELSE : "else" >
	| < IF : "if" >
	| < INT: "int" >
	| < LF: "\n" >
	| < LENGTH : "length" >
	| < MAIN : "main" >
	| < NEW : "new" >
	| < NOT : "!" >
	| < PAR_R: ")" >
	| < PAR_L: "(" >
	| < PFINAL : "." >
	| < PUBLIC : "public" >
	| < RET : "return" >
	| < RELA_OP : ">" | "<" | "<=" | ">=" | "==" | "!=" >
	| < LESSTHAN : "<" >
	| < SCOLON: ";" >
	| < STATIC : "static" >
	| < STR : "String" >
	| < THIS : "this" >
	| < VIRG : "," >
	| < VOID : "void" >
	| < WHILE : "while" >
	| < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Program */
        try {
/*@egen*/
	ClassDeclaration() <LF>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	<CLASS> <IDENTIFIER> [<EXT> <IDENTIFIER>] <CHAV_L>
	(VarDeclaration())*
	(MainDeclaration() | MethodDeclaration())*
	<CHAV_R>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) VarDeclaration */
        try {
/*@egen*/
	Type() <IDENTIFIER> <SCOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MainDeclaration(): {/*@bgen(jjtree) MainDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MainDeclaration */
        try {
/*@egen*/
	<PUBLIC> <STATIC> <VOID> <MAIN> <PAR_L> 
	<STR> <BRACKET_L> <BRACKET_R> <IDENTIFIER> <PAR_R>
	<CHAV_L> (VarDeclaration())*
	(Statement())* <CHAV_R>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MethodDeclaration(): {/*@bgen(jjtree) MethodDeclaration */
  SimpleNode jjtn000 = new SimpleNode(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MethodDeclaration */
        try {
/*@egen*/
	<PUBLIC> Type() <IDENTIFIER> <PAR_L>
	[Type() <IDENTIFIER> (<VIRG> Type() <IDENTIFIER>)*] <PAR_R>
	<CHAV_L> (VarDeclaration())* (Statement())* 
	<RET> Expression() <SCOLON> <CHAV_R>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Type(): {/*@bgen(jjtree) Type */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Type */
        try {
/*@egen*/
	<INT> | <BOOLEAN> | <IDENTIFIER> | (<INT> <BRACKET_L> <BRACKET_R>)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Statement(): {/*@bgen(jjtree) Statement */
  SimpleNode jjtn000 = new SimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Statement */
        try {
/*@egen*/ 
	(<CHAV_L> (Statement())* <CHAV_R>)
	| <IF> <PAR_L> Expression() <PAR_R> Statement() <ELSE> Statement()
	| <WHILE> <PAR_L> Expression() <PAR_R> Statement()
	| Expression() <SCOLON>
	| <IDENTIFIER> <EQ> Expression() <SCOLON>
	| <IDENTIFIER> <BRACKET_L> Expression() <BRACKET_R> <EQ> Expression() <SCOLON>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Expression(): {/*@bgen(jjtree) Expression */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Expression */
        try {
/*@egen*/ 
	(Expression() (<AND> | <LESSTHAN> | <ADDSUB_OP> | <ARITH_OP>) Expression())
	| (Expression() <BRACKET_L> Expression() <BRACKET_R>)
	| (Expression() <PFINAL> <LENGTH>) 
	| (Expression() <PFINAL> <IDENTIFIER> <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>)
	| <INTEGER>
	| <BOOL> 
	| <IDENTIFIER>
	| <THIS>
	| <NEW> <INT> <BRACKET_L> Expression() <BRACKET_R>
	| <NEW> <IDENTIFIER> <PAR_L> <PAR_R>
	| <NOT> Expression()
	| <PAR_L> Expression() <PAR_R>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}