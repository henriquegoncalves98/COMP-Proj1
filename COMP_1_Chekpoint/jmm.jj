/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jmm.jj */
/*@egen*/options {
 LOOKAHEAD = 1;
              
}

PARSER_BEGIN(Jmm)

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.IOException;
import java.util.*;

public class Jmm/*@bgen(jjtree)*/implements JmmTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJmmState jjtree = new JJTJmmState();

/*@egen*/
	public static void main(String args[]) throws ParseException, IOException {

		InputStream f = null;

		try {
            f = new FileInputStream("teste");
        }catch(FileNotFoundException e) {
			System.out.println("Error opening file:");
            System.out.println(e.getMessage());
            System.exit(1);
        }

		try{
			Jmm myJmm = new Jmm(f);
			SimpleNode root = myJmm.Program(); // returns reference to root node
		
			root.dump("");
		} catch (Exception e){
			System.out.println("Sorry, we were not able to run your code, because we found one or more error trying to parse it.");
		}
	}
}

PARSER_END(Jmm)
SKIP:
{
	"\t" 
	| "\r"
	| "\n"
	| " " 
	| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
	| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}
TOKEN:{
	< INTEGER: (["0" - "9"])+ >
	| < ADDSUB_OP: "+" | "-">
	| < ARITH_OP: "*" | "/" >
	| < AND : "&&" >
	| < BRACKET_R: "]" >
	| < BRACKET_L: "[" >
	| < BOOL: "true" | "false" >
	| < BOOLEAN: "boolean" >
	| < CLASS : "class" >
	| < CHAV_R : "}" >
	| < CHAV_L : "{" >
	| < EQ : "=" >
	| < EXT : "extends" >
	| < ELSE : "else" >
	| < IF : "if" >
	| < INT: "int" >
	//| < LF: "\n" >
	| < LENGTH : "length" >
	| < MAIN : "main" >
	| < NEW : "new" >
	| < NOT : "!" >
	| < PAR_R: ")" >
	| < PAR_L: "(" >
	| < PFINAL : "." >
	| < PUBLIC : "public" >
	| < RET : "return" >
	| < LESSTHAN : "<" >
	| < SCOLON: ";" >
	| < STATIC : "static" >
	| < STR : "String" >
	| < THIS : "this" >
	| < VIRG : "," >
	| < VOID : "void" >
	| < WHILE : "while" >
	| < IDENTIFIER: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z","_"])* >
}

SimpleNode Program(): {/*@bgen(jjtree) Program */
  ASTProgram jjtn000 = new ASTProgram(JJTPROGRAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Program */
        try {
/*@egen*/
	ClassDeclaration()/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {
		return jjtn000;
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ClassDeclaration(): {/*@bgen(jjtree) ClassDeclaration */
                           ASTClassDeclaration jjtn000 = new ASTClassDeclaration(JJTCLASSDECLARATION);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;} {/*@bgen(jjtree) ClassDeclaration */
        try {
/*@egen*/
	try{
		<CLASS> 
			t=<IDENTIFIER> { jjtn000.setName(t.image); }
		[ExtendClassDeclaration()] <CHAV_L>
	} catch (ParseException e){
		System.out.println("Class declaration: " + e.getMessage());
	}
	(VarDeclaration())*
	AuxClassDeclaration()
	<CHAV_R>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ExtendClassDeclaration()     : {/*@bgen(jjtree) EXT */
  ASTEXT jjtn000 = new ASTEXT(JJTEXT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) EXT */
        try {
/*@egen*/
	<EXT> ID()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void AuxClassDeclaration()      : {} {
	( <PUBLIC> (MainDeclaration() | MethodDeclaration()) )*
}

void VarDeclaration(): {/*@bgen(jjtree) VarDeclaration */
  ASTVarDeclaration jjtn000 = new ASTVarDeclaration(JJTVARDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) VarDeclaration */
        try {
/*@egen*/
	try{
	Type() <IDENTIFIER> <SCOLON>
	} catch (ParseException e){
		System.out.println("Var declaration: " + e.getMessage());
	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MainDeclaration(): {/*@bgen(jjtree) MainDeclaration */
  ASTMainDeclaration jjtn000 = new ASTMainDeclaration(JJTMAINDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MainDeclaration */
        try {
/*@egen*/
	<STATIC> <VOID> <MAIN> <PAR_L> 
	<STR> <BRACKET_L> <BRACKET_R> <IDENTIFIER> <PAR_R>
	<CHAV_L> (LOOKAHEAD(2) VarDeclaration())*
	(Statement())* <CHAV_R>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void MethodDeclaration(): {/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) MethodDeclaration */
        try {
/*@egen*/
	Type() <IDENTIFIER> <PAR_L>
	[Type() <IDENTIFIER> (<VIRG> Type() <IDENTIFIER>)*] <PAR_R>
	<CHAV_L> (LOOKAHEAD(2) VarDeclaration())* (Statement())* 
	<RET> Expression() <SCOLON> <CHAV_R>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Type()      : {} {
	(<INT> (<BRACKET_L> <BRACKET_R>)?)| <BOOLEAN> | <IDENTIFIER>
}

void Statement()      : {} { 
	<CHAV_L> (Statement())* <CHAV_R>
	|/*@bgen(jjtree) IfElseStatement */
          {
            ASTIfElseStatement jjtn001 = new ASTIfElseStatement(JJTIFELSESTATEMENT);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
          }
          try {
/*@egen*/ (<IF> <PAR_L> Expression() <PAR_R> Statement() <ELSE> Statement())/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
            }
          }
/*@egen*/                
	|/*@bgen(jjtree) WhileStatement */
          {
            ASTWhileStatement jjtn002 = new ASTWhileStatement(JJTWHILESTATEMENT);
            boolean jjtc002 = true;
            jjtree.openNodeScope(jjtn002);
          }
          try {
/*@egen*/ (<WHILE> <PAR_L> Expression() <PAR_R> Statement())/*@bgen(jjtree)*/
          } catch (Throwable jjte002) {
            if (jjtc002) {
              jjtree.clearNodeScope(jjtn002);
              jjtc002 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
              throw (RuntimeException)jjte002;
            }
            if (jjte002 instanceof ParseException) {
              throw (ParseException)jjte002;
            }
            throw (Error)jjte002;
          } finally {
            if (jjtc002) {
              jjtree.closeNodeScope(jjtn002, true);
            }
          }
/*@egen*/               
	| LOOKAHEAD(2) Expression() <SCOLON>
	|/*@bgen(jjtree) #Assing(> 1) */
          {
            ASTAssing jjtn003 = new ASTAssing(JJTASSING);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
          }
          try {
/*@egen*/ (ID() (<BRACKET_L> Expression() <BRACKET_R>)? StatementAux())/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, jjtree.nodeArity() > 1);
            }
          }
/*@egen*/           
	/*
	| Expression() <SCOLON>
	| <IDENTIFIER> StatementAux()
	
	| (ExpressionAux() #Expression) <SCOLON>
	| <IDENTIFIER> (<BRACKET_L> Expression() <BRACKET_R>)? ( StatementAux() | (ExpressionRecursive2() <SCOLON>))
	*/
}

void StatementAux()      : {} {
	<EQ> Expression() <SCOLON>
}


/** An Expression. */
void Expression()       : {}
{
  AndExpression()
}

/** An And(&&) Expression. */
void AndExpression()       : {}
{/*@bgen(jjtree) #AND(> 1) */
  {
    ASTAND jjtn001 = new ASTAND(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    LessThanExpression() (<AND> LessThanExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/         
}

/** An LessThan(<) Expression. */
void LessThanExpression()       : {}
{/*@bgen(jjtree) #LessThan(> 1) */
  {
    ASTLessThan jjtn001 = new ASTLessThan(JJTLESSTHAN);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    AddSubExpression() ( <LESSTHAN> AddSubExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/              
}

/** An AddSub Expression. */
void AddSubExpression()       : {Token t;}
{/*@bgen(jjtree) #Additive(> 1) */
  {
    ASTAdditive jjtn001 = new ASTAdditive(JJTADDITIVE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    MultiplicativeExpression() ( (t=<ADDSUB_OP> { jjtn001.setName(t.image); }) MultiplicativeExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/              
}

/** A Multiplicative Expression. */
void MultiplicativeExpression()       : {Token t;}
{/*@bgen(jjtree) #Multiplicative(> 1) */
  {
    ASTMultiplicative jjtn001 = new ASTMultiplicative(JJTMULTIPLICATIVE);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
    AccessExpression() ( (t=<ARITH_OP> { jjtn001.setName(t.image); }) AccessExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/                    
}

/** An Access Expression. */
void AccessExpression()     : {}
{/*@bgen(jjtree) #AccessExpr(> 1) */
        {
          ASTAccessExpr jjtn002 = new ASTAccessExpr(JJTACCESSEXPR);
          boolean jjtc002 = true;
          jjtree.openNodeScope(jjtn002);
        }
        try {
/*@egen*/
	(
		UnaryExpression() (/*@bgen(jjtree) Expression */
                        {
                          ASTExpression jjtn001 = new ASTExpression(JJTEXPRESSION);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ 
			(
				<BRACKET_L> Expression() <BRACKET_R>
				| <PFINAL> (<LENGTH> | (ID() <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>))
			)/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/           
		)*
	)/*@bgen(jjtree)*/
        } catch (Throwable jjte002) {
          if (jjtc002) {
            jjtree.clearNodeScope(jjtn002);
            jjtc002 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte002 instanceof RuntimeException) {
            throw (RuntimeException)jjte002;
          }
          if (jjte002 instanceof ParseException) {
            throw (ParseException)jjte002;
          }
          throw (Error)jjte002;
        } finally {
          if (jjtc002) {
            jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/               
}

/** A Unary Expression. */
void UnaryExpression()       : {}
{
   <PAR_L> Expression() <PAR_R>
    | <NOT> UnaryExpression()
	| <NEW> ExpressionNew()
	| <THIS>
	| ID()
	| Bool()
	| Integer()
}

void ExpressionNew()      : {} { 
	<INT> <BRACKET_L> Expression() <BRACKET_R>
	| <IDENTIFIER> <PAR_L> <PAR_R>
}	

/** An Identifier. */
void ID() :
{/*@bgen(jjtree) ID */
  ASTID jjtn000 = new ASTID(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) ID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** An Integer. */
void Integer() : {/*@bgen(jjtree) Integer */
                  ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t=<INTEGER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** A Boolean. */
void Bool() : {/*@bgen(jjtree) Bool */
  ASTBool jjtn000 = new ASTBool(JJTBOOL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Bool */
  try {
/*@egen*/
  <BOOL>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/////////////////////////////////////////////////

/*
void Expression(): {} { 
	<IDENTIFIER> ExpressionRecursive()
	| ExpressionAux()
}

void ExpressionAux() #void: {} { 
	(
		<INTEGER>
		| <BOOL> 
		| <THIS>
		| <NEW> ExpressionNew()
		| <NOT> Expression()
		| <PAR_L> Expression() <PAR_R>
	) ExpressionRecursive()
}

void ExpressionNew() #New: {} { 
	<INT> <BRACKET_L> Expression() <BRACKET_R>
	| <IDENTIFIER> <PAR_L> <PAR_R>
}	

void ExpressionRecursive() #void: {} { 
	ExpressionRecursiveAux()
	| Empty()
}

void ExpressionRecursiveAux() #Expression: {} {
	(
		(<AND> | <LESSTHAN> | <ADDSUB_OP> | <ARITH_OP>) Expression()
		| <BRACKET_L> Expression() <BRACKET_R>
		| <PFINAL> (<LENGTH> | <IDENTIFIER> <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>)
	) ExpressionRecursive()
}
*/
/* This second recursive functions are helpers for the statement non terminal symbol */
/*
void ExpressionRecursive2() #void: {} { 
	ExpressionRecursiveAux2()
	| Empty()
}

void ExpressionRecursiveAux2() #Expression: {} {
	(
		(<AND> | <LESSTHAN> | <ADDSUB_OP> | <ARITH_OP>) Expression()
		| <PFINAL> (<LENGTH> | <IDENTIFIER> <PAR_L> [Expression() (<VIRG> Expression())*] <PAR_R>)
	) ExpressionRecursive()
}*/


/* Epsilon terminal expressed as the non-terminal symbol empty*/
void Empty()      : {}
{
	{}
}